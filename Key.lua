-- ==========================
-- Panda Auth Key System Example
-- ==========================

getgenv().key = getgenv().key or "" -- ‡πÉ‡∏™‡πà‡∏Ñ‡∏µ‡∏¢‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ (‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏≠‡∏á)
local API_TOKEN = "a7afc66a5753f44c774acb36f7045fcaa91bb31301d5f7314d4b25407a765d25" -- Vanguard API Token
local VERIFY_URL = "https://api.pandadevelopment.net/v1/auth/verify" -- API ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏µ‡∏¢‡πå‡∏Ç‡∏≠‡∏á Panda
local REMOTE_SCRIPT_URL = "https://raw.githubusercontent.com/Ecohub-1/Ecohub-1/refs/heads/main/money.lua"

local HttpService = game:GetService("HttpService")

-- ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö executor ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö
local function doRequest(req)
	local ok, res = pcall(function()
		if syn and syn.request then
			return syn.request(req)
		elseif request then
			return request(req)
		elseif http and http.request then
			return http.request(req)
		elseif HttpService.RequestAsync then
			return HttpService:RequestAsync(req)
		else
			local body = game:HttpGet(req.Url, true)
			return { Body = body, StatusCode = 200 }
		end
	end)
	if not ok or not res then
		return nil, "request_failed"
	end
	local body = res.Body or res.body
	return { body = body, status = res.StatusCode or res.Status }
end

local function tryDecodeJson(b)
	local ok, decoded = pcall(function()
		return HttpService:JSONDecode(b)
	end)
	if ok then return decoded end
	return nil
end

local function verifyKey(key)
	if key == "" then
		warn("[KeySystem] ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏µ‡∏¢‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡∏µ‡∏¢‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå")
		return false
	end

	local body = HttpService:JSONEncode({ key = key })
	local req = {
		Url = VERIFY_URL,
		Method = "POST",
		Headers = {
			["Content-Type"] = "application/json",
			["Authorization"] = "Bearer " .. API_TOKEN
		},
		Body = body
	}

	print("[KeySystem] üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡∏Å‡∏±‡∏ö Panda API ...")
	local res, err = doRequest(req)
	if not res then
		warn("[KeySystem] ‚ùå Request error:", err)
		return false
	end

	local decoded = tryDecodeJson(res.body)
	if decoded then
		if decoded.valid or decoded.success then
			print("[KeySystem] ‚úÖ ‡∏Ñ‡∏µ‡∏¢‡πå‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö")
			return true
		else
			warn("[KeySystem] ‚ùå ‡∏Ñ‡∏µ‡∏¢‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:", decoded.message or "unknown reason")
		end
	else
		warn("[KeySystem] ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å API:", res.body)
	end
	return false
end

local function loadRemoteScript()
	local res, err = doRequest({ Url = REMOTE_SCRIPT_URL, Method = "GET" })
	if not res then
		return warn("[KeySystem] ‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err)
	end
	local fn, loadErr = loadstring(res.body)
	if not fn then
		return warn("[KeySystem] ‚ùå Error loadstring:", loadErr)
	end
	local success, runErr = pcall(fn)
	if not success then
		return warn("[KeySystem] ‚ùå Error ‡∏Ç‡∏ì‡∏∞‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå:", runErr)
	end
	print("[KeySystem] ‚úÖ ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
end

-- MAIN FLOW
if verifyKey(getgenv().key) then
	loadRemoteScript()
end
